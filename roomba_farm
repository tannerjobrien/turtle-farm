-- roomba_farm_fd_mature_chest_path_fuel.lua
-- Farming Turtle with Farmer's Delight support, maturity checks,
-- automatic unloading/refueling, path tracking, and fuel threshold.

-- Crop-to-seed mapping
local cropSeeds = {
    ["minecraft:wheat"] = "minecraft:wheat_seeds",
    ["minecraft:carrots"] = "minecraft:carrot",
    ["minecraft:potatoes"] = "minecraft:potato",
    ["minecraft:beetroots"] = "minecraft:beetroot_seeds",
    ["farmersdelight:cabbages"] = "farmersdelight:cabbage_seeds",
    ["farmersdelight:onions"] = "farmersdelight:onion",
    ["farmersdelight:tomatoes"] = "farmersdelight:tomato_seeds",
    ["farmersdelight:rice_panicles"] = "farmersdelight:rice"
}

-- Path tracking
local path = {}

local function recordMove(move)
    table.insert(path, move)
end

-- Fuel threshold
local MIN_FUEL = 200

local function ensureFuel()
    local fuel = turtle.getFuelLevel()
    if fuel == "unlimited" then return true end
    if fuel < MIN_FUEL then
        print("Fuel low ("..fuel.."), returning to refuel...")
        unloadAndRefuel()
    end
end

-- Movement wrappers
local function forward()
    ensureFuel()
    while not turtle.forward() do
        turtle.dig()
        sleep(0.2)
    end
    recordMove("F")
end

local function turnLeft()
    turtle.turnLeft()
    recordMove("L")
end

local function turnRight()
    turtle.turnRight()
    recordMove("R")
end

-- Reverse navigation
local function goHome()
    for i = #path, 1, -1 do
        local move = path[i]
        if move == "F" then
            turtle.back()
        elseif move == "L" then
            turtle.turnRight()
        elseif move == "R" then
            turtle.turnLeft()
        end
    end
end

local function returnToWork()
    for i = 1, #path do
        local move = path[i]
        if move == "F" then
            turtle.forward()
        elseif move == "L" then
            turtle.turnLeft()
        elseif move == "R" then
            turtle.turnRight()
        end
    end
end

-- Select matching seed
local function selectSeed(seedName)
    for i = 1, 16 do
        local detail = turtle.getItemDetail(i)
        if detail and detail.name == seedName then
            turtle.select(i)
            return true
        end
    end
    return false
end

-- Harvest + replant with maturity checks
local function harvestAndReplant()
    local success, data = turtle.inspectDown()
    if not success then return end

    local blockName = data.name
    local state = data.state or {}

    if (blockName == "minecraft:wheat" or
        blockName == "minecraft:carrots" or
        blockName == "minecraft:potatoes" or
        blockName == "minecraft:beetroots") and state.age == 7 then
        turtle.digDown()
        if selectSeed(cropSeeds[blockName]) then turtle.placeDown() end
        return
    end

    if blockName == "farmersdelight:cabbages" and state.age == 7 then
        turtle.digDown()
        if selectSeed("farmersdelight:cabbage_seeds") then turtle.placeDown() end
        return
    end

    if blockName == "farmersdelight:onions" and state.age == 7 then
        turtle.digDown()
        if selectSeed("farmersdelight:onion") then turtle.placeDown() end
        return
    end

    if blockName == "farmersdelight:tomatoes" and state.age == 7 then
        turtle.digDown()
        local upSuccess, upData = turtle.inspectUp()
        if upSuccess and upData.name == "farmersdelight:tomatoes" then
            turtle.digUp()
        end
        if selectSeed("farmersdelight:tomato_seeds") then turtle.placeDown() end
        return
    end

    if blockName == "farmersdelight:rice_panicles" and state.age == 3 then
        turtle.digDown()
        if selectSeed("farmersdelight:rice") then turtle.placeDown() end
        return
    end
end

-- Inventory check
local function inventoryFull()
    for i = 1, 16 do
        if not turtle.getItemDetail(i) then
            return false
        end
    end
    return true
end

-- Unload + refuel at chest behind start
function unloadAndRefuel()
    goHome()

    -- Face chest
    turtle.turnLeft()
    turtle.turnLeft()

    -- Drop all
    for i = 1, 16 do
        turtle.select(i)
        turtle.drop()
    end

    -- Refuel if chest has fuel
    turtle.suck(1)
    if turtle.refuel(0) then
        turtle.refuel()
    end
    turtle.drop()

    -- Face farm again
    turtle.turnLeft()
    turtle.turnLeft()

    returnToWork()
end

-- Farming loop
local function farm()
    local turnRightNext = true
    while true do
        while turtle.forward() do
            recordMove("F")
            harvestAndReplant()
            if inventoryFull() then
                unloadAndRefuel()
            end
            ensureFuel()
        end
        harvestAndReplant()

        if turnRightNext then
            turnRight()
            if turtle.forward() then
                recordMove("F")
                turnRight()
                turnRightNext = false
            else
                break
            end
        else
            turnLeft()
            if turtle.forward() then
                recordMove("F")
                turnLeft()
                turnRightNext = true
            else
                break
            end
        end
    end
end

-- Run
farm()
unloadAndRefuel()
print("Farm cycle complete!")
