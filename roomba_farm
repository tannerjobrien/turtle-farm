-- roomba_farm_fd_coords.lua
-- Farming Turtle with Farmer's Delight support, maturity checks,
-- automatic unloading/refueling (chest below), coordinate tracking,
-- and fuel threshold. Returns home directly instead of retracing.

-- Crop-to-seed mapping
local cropSeeds = {
    ["minecraft:wheat"] = "minecraft:wheat_seeds",
    ["minecraft:carrots"] = "minecraft:carrot",
    ["minecraft:potatoes"] = "minecraft:potato",
    ["minecraft:beetroots"] = "minecraft:beetroot_seeds",
    ["farmersdelight:cabbages"] = "farmersdelight:cabbage_seeds",
    ["farmersdelight:onions"] = "farmersdelight:onion",
    ["farmersdelight:tomatoes"] = "farmersdelight:tomato_seeds",
    ["farmersdelight:rice_panicles"] = "farmersdelight:rice"
}

-- Position tracking
local x, y, dir = 0, 0, 0  -- start at (0,0), facing north (0=N,1=E,2=S,3=W)

local MIN_FUEL = 200

-- Helper: check if an item is fuel
local function isFuelItem(name)
    return name == "minecraft:coal" or name == "minecraft:charcoal"
end

-- Movement wrappers
local function ensureFuel()
    local fuel = turtle.getFuelLevel()
    if fuel == "unlimited" then return true end
    if fuel < MIN_FUEL then
        print("Fuel low ("..fuel.."), returning to refuel...")
        unloadAndRefuel()
    end
end

local function forward()
    ensureFuel()
    while not turtle.forward() do
        turtle.dig()
        sleep(0.2)
    end
    if dir == 0 then y = y + 1
    elseif dir == 1 then x = x + 1
    elseif dir == 2 then y = y - 1
    elseif dir == 3 then x = x - 1 end
end

local function turnLeft() turtle.turnLeft(); dir = (dir - 1) % 4 end
local function turnRight() turtle.turnRight(); dir = (dir + 1) % 4 end

-- Go directly home
local function goHomeDirect()
    -- Fix X
    if x > 0 then
        while dir ~= 3 do turnLeft() end
        for i=1,x do turtle.forward() end
    elseif x < 0 then
        while dir ~= 1 do turnLeft() end
        for i=1,-x do turtle.forward() end
    end
    x = 0
    -- Fix Y
    if y > 0 then
        while dir ~= 2 do turnLeft() end
        for i=1,y do turtle.forward() end
    elseif y < 0 then
        while dir ~= 0 do turnLeft() end
        for i=1,-y do turtle.forward() end
    end
    y = 0
end

-- Return to work: not needed with direct home, we just resume from home
-- (farm loop will continue from current position)

-- Select matching seed
local function selectSeed(seedName)
    for i = 1, 16 do
        local detail = turtle.getItemDetail(i)
        if detail and detail.name == seedName then
            turtle.select(i)
            return true
        end
    end
    return false
end

-- Harvest + replant with maturity checks
local function harvestAndReplant()
    local success, data = turtle.inspectDown()
    if not success then return end
    local blockName, state = data.name, data.state or {}

    if (blockName == "minecraft:wheat" or
        blockName == "minecraft:carrots" or
        blockName == "minecraft:potatoes" or
        blockName == "minecraft:beetroots") and state.age == 7 then
        turtle.digDown()
        if selectSeed(cropSeeds[blockName]) then turtle.placeDown() end
        return
    end
    if blockName == "farmersdelight:cabbages" and state.age == 7 then
        turtle.digDown()
        if selectSeed("farmersdelight:cabbage_seeds") then turtle.placeDown() end
        return
    end
    if blockName == "farmersdelight:onions" and state.age == 7 then
        turtle.digDown()
        if selectSeed("farmersdelight:onion") then turtle.placeDown() end
        return
    end
    if blockName == "farmersdelight:tomatoes" and state.age == 7 then
        turtle.digDown()
        local upSuccess, upData = turtle.inspectUp()
        if upSuccess and upData.name == "farmersdelight:tomatoes" then turtle.digUp() end
        if selectSeed("farmersdelight:tomato_seeds") then turtle.placeDown() end
        return
    end
    if blockName == "farmersdelight:rice_panicles" and state.age == 3 then
        turtle.digDown()
        if selectSeed("farmersdelight:rice") then turtle.placeDown() end
        return
    end
end

-- Inventory check
local function inventoryFull()
    for i = 1, 16 do if not turtle.getItemDetail(i) then return false end end
    return true
end

-- Unload + refuel at chest below
function unloadAndRefuel()
    goHomeDirect()

    -- Drop all non-fuel items into chest below
    for i = 1, 16 do
        local detail = turtle.getItemDetail(i)
        if detail and not isFuelItem(detail.name) then
            turtle.select(i)
            turtle.dropDown()
        end
    end

    -- Refuel from own inventory first
    for i = 1, 16 do
        local detail = turtle.getItemDetail(i)
        if detail and isFuelItem(detail.name) then
            turtle.select(i)
            turtle.refuel()
        end
    end

    -- If still low, try to pull coal/charcoal from chest below
    if turtle.getFuelLevel() < MIN_FUEL then
        turtle.suckDown(1)
        local detail = turtle.getItemDetail()
        if detail and isFuelItem(detail.name) then
            turtle.refuel()
        else
            turtle.dropDown()
        end
    end
end

-- Farming loop
local function farm()
    local turnRightNext = true
    while true do
        -- Traverse one row until blocked
        while true do
            harvestAndReplant()
            if inventoryFull() then unloadAndRefuel() end
            ensureFuel()
            if not turtle.forward() then break else forward() end
        end
        harvestAndReplant()

        -- Try to move to next row
        if turnRightNext then
            turnRight()
            if turtle.forward() then forward(); turnRight(); turnRightNext = false
            else break end
        else
            turnLeft()
            if turtle.forward() then forward(); turnLeft(); turnRightNext = true
            else break end
        end
    end
end

-- Run
farm()
unloadAndRefuel()
print("Farm cycle complete!")
