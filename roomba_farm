-- roomba_farm_fd_no_tomatoes_turnfix.lua
-- Farming Turtle with Farmer's Delight support, maturity checks,
-- automatic unloading/refueling (chest below), coordinate tracking,
-- and fuel threshold. Tomatoes are ignored. Row turning fixed.

-- Crop-to-seed mapping
local cropSeeds = {
    ["minecraft:wheat"] = "minecraft:wheat_seeds",
    ["minecraft:carrots"] = "minecraft:carrot",
    ["minecraft:potatoes"] = "minecraft:potato",
    ["minecraft:beetroots"] = "minecraft:beetroot_seeds",
    ["farmersdelight:cabbages"] = "farmersdelight:cabbage_seeds",
    ["farmersdelight:onions"] = "farmersdelight:onion",
    ["farmersdelight:rice_panicles"] = "farmersdelight:rice"
}

-- Position tracking: start at (0,0), facing north (0=N,1=E,2=S,3=W)
local x, y, dir = 0, 0, 0

local MIN_FUEL = 200

-- Fuel items
local function isFuelItem(name)
    return name == "minecraft:coal" or name == "minecraft:charcoal"
end

-- Fuel check
local function ensureFuel()
    local fuel = turtle.getFuelLevel()
    if fuel == "unlimited" then return true end
    if fuel < MIN_FUEL then
        print("Fuel low ("..fuel.."), returning to refuel...")
        unloadAndRefuel()
    end
end

-- Movement (no digging forward)
local function stepForward()
    ensureFuel()
    if turtle.forward() then
        if dir == 0 then y = y + 1
        elseif dir == 1 then x = x + 1
        elseif dir == 2 then y = y - 1
        elseif dir == 3 then x = x - 1 end
        return true
    else
        return false
    end
end

local function turnLeft()
    turtle.turnLeft()
    dir = (dir - 1) % 4
end

local function turnRight()
    turtle.turnRight()
    dir = (dir + 1) % 4
end

-- Direct return home to (0,0)
local function goHomeDirect()
    -- Fix X
    if x > 0 then
        while dir ~= 3 do turnLeft() end
        for i=1,x do turtle.forward() end
    elseif x < 0 then
        while dir ~= 1 do turnLeft() end
        for i=1,-x do turtle.forward() end
    end
    x = 0
    -- Fix Y
    if y > 0 then
        while dir ~= 2 do turnLeft() end
        for i=1,y do turtle.forward() end
    elseif y < 0 then
        while dir ~= 0 do turnLeft() end
        for i=1,-y do turtle.forward() end
    end
    y = 0
end

-- Seed selection
local function selectSeed(seedName)
    for i = 1, 16 do
        local detail = turtle.getItemDetail(i)
        if detail and detail.name == seedName then
            turtle.select(i)
            return true
        end
    end
    return false
end

-- Harvest + replant with maturity checks
local function harvestAndReplant()
    local success, data = turtle.inspectDown()
    if not success then return end
    local blockName, state = data.name, data.state or {}

    if (blockName == "minecraft:wheat" or
        blockName == "minecraft:carrots" or
        blockName == "minecraft:potatoes") and state.age == 7 then
        turtle.digDown()
        if selectSeed(cropSeeds[blockName]) then turtle.placeDown() end
        return
    end
    -- Beetroots mature at age 3
    if blockName == "minecraft:beetroots" and state.age == 3 then
        turtle.digDown()
        if selectSeed("minecraft:beetroot_seeds") then turtle.placeDown() end
        return
    end
    if blockName == "farmersdelight:cabbages" and state.age == 7 then
        turtle.digDown()
        if selectSeed("farmersdelight:cabbage_seeds") then turtle.placeDown() end
        return
    end
    if blockName == "farmersdelight:onions" and state.age == 7 then
        turtle.digDown()
        if selectSeed("farmersdelight:onion") then turtle.placeDown() end
        return
    end
    if blockName == "farmersdelight:rice_panicles" and state.age == 3 then
        turtle.digDown()
        if selectSeed("farmersdelight:rice") then turtle.placeDown() end
        return
    end

    -- Tomatoes intentionally ignored
end

-- Inventory check
local function inventoryFull()
    for i = 1, 16 do
        if not turtle.getItemDetail(i) then return false end
    end
    return true
end

-- Unload + refuel at chest below
function unloadAndRefuel()
    goHomeDirect()

    -- Drop all non-fuel items into chest below
    for i = 1, 16 do
        local detail = turtle.getItemDetail(i)
        if detail and not isFuelItem(detail.name) then
            turtle.select(i)
            turtle.dropDown()
        end
    end

    -- Refuel from own inventory first
    for i = 1, 16 do
        local detail = turtle.getItemDetail(i)
        if detail and isFuelItem(detail.name) then
            turtle.select(i)
            turtle.refuel()
        end
    end

    -- If still low, try to pull coal/charcoal from chest below only
    if turtle.getFuelLevel() < MIN_FUEL then
        turtle.suckDown(1)
        local detail = turtle.getItemDetail()
        if detail and isFuelItem(detail.name) then
            turtle.refuel()
        else
            turtle.dropDown()
        end
    end
end

-- Farming loop (snake pattern)
local function farm()
    local turnRightNext = true
    while true do
        -- Traverse one row until blocked
        while true do
            harvestAndReplant()
            if inventoryFull() then unloadAndRefuel() end
            ensureFuel()
            if not stepForward() then
                break
            end
        end
        -- At wall: harvest current block once more
        harvestAndReplant()

        -- Try to move to next row (sidestep + turn)
        if turnRightNext then
            turnRight()
            if stepForward() then
                turnRight()
                turnRightNext = false
            else
                break
            end
        else
            turnLeft()
            if stepForward() then
                turnLeft()
                turnRightNext = true
            else
                break
            end
        end
    end
end

-- Run
farm()
unloadAndRefuel()
print("Farm cycle complete!")
